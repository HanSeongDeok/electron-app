"use strict";
const electron = require("electron");
const path = require("path");
const url = require("url");
var _documentCurrentScript = typeof document !== "undefined" ? document.currentScript : null;
const __filename$1 = url.fileURLToPath(typeof document === "undefined" ? require("url").pathToFileURL(__filename).href : _documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === "SCRIPT" && _documentCurrentScript.src || new URL("main.js", document.baseURI).href);
const __dirname$1 = path.dirname(__filename$1);
const createWindow = () => {
  const win = new electron.BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      preload: path.join(__dirname$1, "preload.js"),
      contextIsolation: true,
      nodeIntegration: false
    }
  });
  if (electron.app.isPackaged) {
    win.loadFile(path.join(__dirname$1, "renderer/index.html"));
  } else {
    win.loadURL("http://localhost:5173");
    win.webContents.openDevTools();
  }
};
const SEND_MAIN_PING = "send_main_ping";
const RECIEVE_REACT_PONG = "recieve_react_pong";
const PING_PONG_EVENT = "ping_pong_connect";
const GET_USER = "get-user";
const pingpongHandler = () => {
  electron.ipcMain.on(SEND_MAIN_PING, (event, args) => {
    console.log(args);
    event.reply(
      RECIEVE_REACT_PONG,
      PING_PONG_EVENT,
      RECIEVE_REACT_PONG
    );
  });
};
async function getUser() {
  return { name: "Han", role: "Creater" };
}
const userHandler = () => {
  electron.ipcMain.handle(GET_USER, async (...args) => {
    console.log("[Main] GET_USER handler called with", args);
    return await getUser();
  });
};
const registerHandlers = () => {
  pingpongHandler();
  userHandler();
};
electron.app.whenReady().then(() => {
  createWindow();
  registerHandlers();
});
electron.app.on("window-all-closed", function() {
  if (process.platform !== "darwin") electron.app.quit();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21haW4vd2luZG93LnRzIiwiLi4vLi4vc3JjL2NvbnN0YW50cy50cyIsIi4uLy4uL3NyYy9tYWluL2lwYy9waW5ncG9uZy5oYW5kbGVyLnRzIiwiLi4vLi4vc3JjL21haW4vc2VydmljZXMvdXNlci5zZXJ2aWNlLnRzIiwiLi4vLi4vc3JjL21haW4vaXBjL3VzZXIuaGFuZGxlci50cyIsIi4uLy4uL3NyYy9tYWluL2hhbmRsZXJzLnRzIiwiLi4vLi4vc3JjL21haW4vbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcHAsIEJyb3dzZXJXaW5kb3cgfSBmcm9tIFwiZWxlY3Ryb25cIjtcclxuaW1wb3J0IHBhdGgsIHsgZGlybmFtZSB9IGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tIFwidXJsXCI7XHJcblxyXG5jb25zdCBfX2ZpbGVuYW1lID0gZmlsZVVSTFRvUGF0aChpbXBvcnQubWV0YS51cmwpXHJcbmNvbnN0IF9fZGlybmFtZSA9IGRpcm5hbWUoX19maWxlbmFtZSlcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVXaW5kb3cgPSAoKSA9PiB7IFxyXG4gIGNvbnN0IHdpbiA9IG5ldyBCcm93c2VyV2luZG93KHsgXHJcbiAgICB3aWR0aDogODAwLCBcclxuICAgIGhlaWdodDogNjAwLCBcclxuICAgIHdlYlByZWZlcmVuY2VzOiB7IFxyXG4gICAgICBwcmVsb2FkOiBwYXRoLmpvaW4oX19kaXJuYW1lLCAncHJlbG9hZC5qcycpLFxyXG4gICAgICBjb250ZXh0SXNvbGF0aW9uIDogdHJ1ZSxcclxuICAgICAgbm9kZUludGVncmF0aW9uOiBmYWxzZVxyXG4gICAgfSBcclxuICB9KSBcclxuICBpZiAoYXBwLmlzUGFja2FnZWQpIHtcclxuICAgICB3aW4ubG9hZEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgJ3JlbmRlcmVyL2luZGV4Lmh0bWwnKSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHdpbi5sb2FkVVJMKFwiaHR0cDovL2xvY2FsaG9zdDo1MTczXCIpXHJcbiAgICB3aW4ud2ViQ29udGVudHMub3BlbkRldlRvb2xzKClcclxuICB9XHJcbn0gIiwiZXhwb3J0IGNvbnN0IFNFTkRfTUFJTl9QSU5HID0gJ3NlbmRfbWFpbl9waW5nJ1xyXG5leHBvcnQgY29uc3QgUkVDSUVWRV9SRUFDVF9QT05HID0gJ3JlY2lldmVfcmVhY3RfcG9uZycgIFxyXG5leHBvcnQgY29uc3QgUElOR19QT05HX0VWRU5UID0gJ3BpbmdfcG9uZ19jb25uZWN0J1xyXG5leHBvcnQgY29uc3QgR0VUX1VTRVIgPSAnZ2V0LXVzZXInICIsImltcG9ydCB7IFBJTkdfUE9OR19FVkVOVCwgUkVDSUVWRV9SRUFDVF9QT05HLCBTRU5EX01BSU5fUElORyB9IGZyb20gXCJAL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBpcGNNYWluIH0gZnJvbSBcImVsZWN0cm9uXCI7XHJcblxyXG5leHBvcnQgY29uc3QgcGluZ3BvbmdIYW5kbGVyID0gKCkgPT4ge1xyXG4gICAgaXBjTWFpbi5vbihTRU5EX01BSU5fUElORywgKGV2ZW50LCBhcmdzKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYXJncylcclxuICAgICAgICBldmVudC5yZXBseShSRUNJRVZFX1JFQUNUX1BPTkcsXHJcbiAgICAgICAgICAgIFBJTkdfUE9OR19FVkVOVCwgUkVDSUVWRV9SRUFDVF9QT05HKSAvLyBldmVudCAvLyBtZXNzYWdlIFxyXG4gICAgfSk7XHJcbn0iLCJpbXBvcnQgdHlwZSB7IFVzZXIgfSBmcm9tIFwiLi4vbW9kZWwvdXNlci5tb2RlbFwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFVzZXIoKTogUHJvbWlzZTxVc2VyPiB7XHJcbiAgcmV0dXJuIHsgbmFtZTogJ0hhbicsIHJvbGU6ICdDcmVhdGVyJyB9O1xyXG59XHJcbiIsImltcG9ydCB7IGlwY01haW4gfSBmcm9tICdlbGVjdHJvbic7XHJcbmltcG9ydCB7IGdldFVzZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy91c2VyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBHRVRfVVNFUiB9IGZyb20gJ0AvY29uc3RhbnRzJztcclxuXHJcbmV4cG9ydCBjb25zdCB1c2VySGFuZGxlciA9ICgpID0+IHtcclxuICAgIGlwY01haW4uaGFuZGxlKEdFVF9VU0VSLCBhc3luYyAoLi4uYXJncykgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ1tNYWluXSBHRVRfVVNFUiBoYW5kbGVyIGNhbGxlZCB3aXRoJywgYXJncyk7XHJcbiAgICByZXR1cm4gYXdhaXQgZ2V0VXNlcigpO1xyXG4gIH0pO1xyXG59XHJcbiIsImltcG9ydCB7IHBpbmdwb25nSGFuZGxlciB9IGZyb20gXCIuL2lwYy9waW5ncG9uZy5oYW5kbGVyXCJcclxuaW1wb3J0IHsgdXNlckhhbmRsZXIgfSBmcm9tIFwiLi9pcGMvdXNlci5oYW5kbGVyXCI7XHJcblxyXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJIYW5kbGVycyA9ICgpID0+IHtcclxuICAgIHBpbmdwb25nSGFuZGxlcigpO1xyXG4gICAgdXNlckhhbmRsZXIoKTtcclxufSAiLCJpbXBvcnQgeyBhcHAgfSBmcm9tICdlbGVjdHJvbidcclxuaW1wb3J0IHsgY3JlYXRlV2luZG93IH0gZnJvbSAnLi93aW5kb3cuanMnXHJcbmltcG9ydCB7IHJlZ2lzdGVySGFuZGxlcnMgfSBmcm9tICcuL2hhbmRsZXJzLmpzJ1xyXG5cclxuYXBwLndoZW5SZWFkeSgpLnRoZW4oKCkgPT4geyBcclxuICBjcmVhdGVXaW5kb3coKSBcclxuICByZWdpc3RlckhhbmRsZXJzKCk7XHJcbn0pIFxyXG5hcHAub24oJ3dpbmRvdy1hbGwtY2xvc2VkJywgZnVuY3Rpb24gKCkgeyBcclxuICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSAhPT0gJ2RhcndpbicpIGFwcC5xdWl0KCkgXHJcbn0pIl0sIm5hbWVzIjpbIl9fZmlsZW5hbWUiLCJmaWxlVVJMVG9QYXRoIiwiX19kaXJuYW1lIiwiZGlybmFtZSIsIkJyb3dzZXJXaW5kb3ciLCJhcHAiLCJpcGNNYWluIl0sIm1hcHBpbmdzIjoiOzs7OztBQUlBLE1BQU1BLGVBQWFDLElBQWMsOFBBQWU7QUFDaEQsTUFBTUMsY0FBWUMsYUFBUUgsWUFBVTtBQUU3QixNQUFNLGVBQWUsTUFBTTtBQUMxQixRQUFBLE1BQU0sSUFBSUksdUJBQWM7QUFBQSxJQUM1QixPQUFPO0FBQUEsSUFDUCxRQUFRO0FBQUEsSUFDUixnQkFBZ0I7QUFBQSxNQUNkLFNBQVMsS0FBSyxLQUFLRixhQUFXLFlBQVk7QUFBQSxNQUMxQyxrQkFBbUI7QUFBQSxNQUNuQixpQkFBaUI7QUFBQSxJQUFBO0FBQUEsRUFDbkIsQ0FDRDtBQUNELE1BQUlHLFNBQUFBLElBQUksWUFBWTtBQUNqQixRQUFJLFNBQVMsS0FBSyxLQUFLSCxhQUFXLHFCQUFxQixDQUFDO0FBQUEsRUFBQSxPQUNwRDtBQUNMLFFBQUksUUFBUSx1QkFBdUI7QUFDbkMsUUFBSSxZQUFZLGFBQWE7QUFBQSxFQUFBO0FBRWpDO0FDdkJPLE1BQU0saUJBQWlCO0FBQ3ZCLE1BQU0scUJBQXFCO0FBQzNCLE1BQU0sa0JBQWtCO0FBQ3hCLE1BQU0sV0FBVztBQ0FqQixNQUFNLGtCQUFrQixNQUFNO0FBQ2pDSSxXQUFBQSxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxTQUFTO0FBQ3hDLFlBQVEsSUFBSSxJQUFJO0FBQ1YsVUFBQTtBQUFBLE1BQU07QUFBQSxNQUNSO0FBQUEsTUFBaUI7QUFBQSxJQUFrQjtBQUFBLEVBQUEsQ0FDMUM7QUFDTDtBQ1BBLGVBQXNCLFVBQXlCO0FBQzdDLFNBQU8sRUFBRSxNQUFNLE9BQU8sTUFBTSxVQUFVO0FBQ3hDO0FDQU8sTUFBTSxjQUFjLE1BQU07QUFDckJBLFdBQUFBLFFBQUEsT0FBTyxVQUFVLFVBQVUsU0FBUztBQUNwQyxZQUFBLElBQUksdUNBQXVDLElBQUk7QUFDdkQsV0FBTyxNQUFNLFFBQVE7QUFBQSxFQUFBLENBQ3RCO0FBQ0g7QUNOTyxNQUFNLG1CQUFtQixNQUFNO0FBQ2xCLGtCQUFBO0FBQ0osY0FBQTtBQUNoQjtBQ0ZBRCxTQUFBQSxJQUFJLFVBQUEsRUFBWSxLQUFLLE1BQU07QUFDWixlQUFBO0FBQ0ksbUJBQUE7QUFDbkIsQ0FBQztBQUNEQSxTQUFBQSxJQUFJLEdBQUcscUJBQXFCLFdBQVk7QUFDdEMsTUFBSSxRQUFRLGFBQWEsU0FBVUEsVUFBQUEsSUFBSSxLQUFLO0FBQzlDLENBQUM7In0=
